# The rate in Hz at which to run the planning loop. If the frequency is set to 0.0, the global 
# planner will only run when a new goal is received or the local planner reports that its path is blocked
planner_frequency: 0.0

# The rate in Hz at which to run the controller loop
controller_frequency: 25.0 # default: 20.0

# How long the planner will wait in seconds in an attempt to find a valid plan before space-clearing 
# operations are performed. 
planner_patience: 5.0 # default: 5.0

# How long the controller will wait in seconds without receiving a valid control before space-clearing 
# operations are performed.
controller_patience: 10.0 # default: 15.0

# The distance away from the robot in meters at which obstacles will be cleared from the costmap when 
# attempting to clear space in the map. Note, this parameter is only used when the default recovery 
# behaviors are used for move_base.
conservative_reset_dist: 3.0 # default: 3.0

# Whether or not to enable the move_base recovery behaviors to attempt to clear out space
recovery_behavior_enabled: true # default: true

# Determines whether or not the robot will attempt an in-place rotation when attempting to clear out space. 
# Note: This parameter is only used when the default recovery behaviors are in use, meaning the user has 
# not set the recovery_behaviors parameter to anything custom. 
clearing_rotation_allowed: true # default: true

# Determines whether or not to shutdown the costmaps of the node when move_base is in an inactive state 
shutdown_costmaps: false # default: false

# How long in seconds to allow for oscillation before executing recovery behaviors. 
# A value of 0.0 corresponds to an infinite timeout.
oscillation_timeout: 0.0 # default: 0.0

# How far in meters the robot must move to be considered not to be oscillating. Moving this far 
# resets the timer counting up to the ~oscillation_timeout
oscillation_distance: 0.5 # default: 0.5

# A list of recovery behavior plugins to use with move_base, see pluginlib documentation for more details on plugins. 
# These behaviors will be run when move_base fails to find a valid plan in the order that they are specified. 
# After each behavior completes, move_base will attempt to make a plan. If planning is successful, move_base will 
# continue normal operation. Otherwise, the next recovery behavior in the list will be executed. These plugins must 
# adhere to the nav_core::RecoveryBehavior interface specified in the nav_core package. 
# (1.0 series default: [{name: conservative_reset, type: ClearCostmapRecovery}, {name: rotate_recovery, 
# type: RotateRecovery}, {name: aggressive_reset, type: ClearCostmapRecovery}]). 
# Note: For the default parameters, the aggressive_reset behavior will clear out to a 
# distance of 4 * ~/local_costmap/circumscribed_radius. 
recovery_behaviors: [{name: rotate_recovery, type: rotate_recovery/RotateRecovery},{name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery},{name: rotate_torso_recovery_left, type: rotate_torso_recovery/RotateTorsoRecoveryLeft},{name: rotate_torso_recovery_right, type: rotate_torso_recovery/RotateTorsoRecoveryRight},{name: temp_costmap_recovery, type: temp_costmap_recovery/TempCostmapRecovery}]

aggressive_reset:
  reset_distance: 0.01


# default [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]
